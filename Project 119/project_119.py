# -*- coding: utf-8 -*-
"""Project 119.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cPpneqPt2FjdEzMtxqB1YVAzk86N0mEe
"""

from google.colab import files
filesToUpload = files.upload()

import pandas as pd
import csv

df = pd.read_csv("data.csv")

print(df.head())

from google.colab import files
filesToUpload = files.upload()

import pandas as pd
import csv

colNames = ['passengerID', 'pclass', 'sex', 'age', 'sibsp', 'parch', 'label']

df = pd.read_csv("data.csv", names=colNames).iloc[1:]

print(df.head())

features = ['passengerID', 'pclass', 'sex', 'age', 'sibsp', 'parch']

df_X = df[features]
df_Y = df.label

from sklearn.tree import export_graphviz
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics
from io import StringIO
from IPython.display import Image
import pydotplus

X_train, X_test, Y_train, Y_test = train_test_split(df_X ,df_Y, test_size = 0.25, random_state = 0)

dlf = DecisionTreeClassifier()

dlf = dlf.fit(X_train, Y_train)

accuracy = dlf.predict(X_test)
print("accuracy :", (metrics.accuracy_score(Y_test, accuracy))*100, "%")

from google.colab import files
filesToUpload = files.upload()

import pandas as pd
import csv

colNames = ['passengerID', 'pclass', 'sex', 'age', 'sibsp', 'parch', 'label']

df = pd.read_csv("data.csv", names=colNames).iloc[1:]

print(df.head())

features = ['passengerID', 'pclass', 'sex', 'age', 'sibsp', 'parch']

#Dividing the entire dataframe into two data frames (75% and 25%)
df_X = df[features]
df_Y = df.label

from sklearn.tree import export_graphviz
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics
from io import StringIO
from IPython.display import Image
import pydotplus

#Dividing the whole data into training and testing data. 
X_train, X_test, Y_train, Y_test = train_test_split(df_X ,df_Y, test_size = 0.3, random_state = 1)

dlf = DecisionTreeClassifier()

#Fitting the data in the model.
dlf = dlf.fit(X_train, Y_train)

#Finding the Accuracy.
accuracy = dlf.predict(X_test)
print("accuracy :", (metrics.accuracy_score(Y_test, accuracy))*100)

#Creating the visualisation for decision tree
dot_data = StringIO()

export_graphviz(dlf, out_file=dot_data, filled=True, rounded=True, special_characters=True, feature_names=features, class_names=['0','1'])

print(dot_data.getvalue())

graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
graph.write_png("TitanicDataSet.png")

Image(graph.create_png())

from google.colab import files
filesToUpload = files.upload()

import pandas as pd
import csv

colNames = ['passengerID', 'pclass', 'sex', 'age', 'sibsp', 'parch', 'label']

df = pd.read_csv("data.csv", names=colNames).iloc[1:]

print(df.head())

features = ['passengerID', 'pclass', 'sex', 'age', 'sibsp', 'parch']

#Dividing the entire dataframe into two data frames (75% and 25%)
df_X = df[features]
df_Y = df.label

from sklearn.tree import export_graphviz
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics
from io import StringIO
from IPython.display import Image
import pydotplus

#Dividing the whole data into training and testing data. 
X_train, X_test, Y_train, Y_test = train_test_split(df_X ,df_Y, test_size = 0.3, random_state = 1)

#Trimming the data for simplification
dlf = DecisionTreeClassifier(max_depth = 3)
dlf = dlf.fit(X_train, Y_train)

accuracy = dlf.predict(X_test)
print("The accuracy of this data is:", (metrics.accuracy_score(Y_test, accuracy))*100 , "%")

#Graphical Visualisation of Trimmed Data
dot_data = StringIO()
export_graphviz(dlf, out_file=dot_data, filled=True, rounded=True, special_characters=True, feature_names=features, class_names=['0','1'])

graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
graph.write_png("TitanicDataSet.png")

Image(graph.create_png())